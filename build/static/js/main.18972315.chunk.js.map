{"version":3,"sources":["components/sprite/index.jsx","components/actor/index.jsx","hooks/use-walk/index.js","components/player/index.jsx","hooks/use-key-press/index.js","App.jsx","serviceWorker.js","index.js"],"names":["sprite","image","data","position","y","x","h","w","style","top","left","height","width","backgroundImage","backgroundRepeat","backgroundPosition","Actor","step","dir","useWalk","maxSteps","useState","setPos","setDir","setStep","directions","down","right","up","modifier","walk","prev","move","Player","fn","skin","e","key","replace","toLowerCase","preventDefault","useEffect","window","addEventListener","removeEventListener","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18972315.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function sprite({ image, data, position }) {\r\n const { y, x, h, w } = data;   \r\n return <div \r\n    style={{\r\n        position: \"absolute\",\r\n        top: position.y,\r\n        left: position.x,\r\n        height: `${h}px`,\r\n        width: `${w}px`,\r\n        backgroundImage: `url(${image})`,\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: `-${x}px -${y}px`,\r\n    }}\r\n />\r\n}","import React from 'react';\r\nimport Sprite from \"../sprite\";\r\n\r\nexport default function Actor({sprite, data, position = {x: 0, y: 0}, step = 0, dir = 0}) {\r\n    const { h, w } = data;\r\n\r\n    return (\r\n      <Sprite \r\n        image = {sprite}\r\n        position={position}\r\n        data = {{\r\n            x: step * w,\r\n            y: dir * h,\r\n            w, \r\n            h,\r\n        }} \r\n      />\r\n    )\r\n}","import {useState} from \"react\";\r\n\r\nexport default function useWalk(maxSteps) {\r\n    const [position, setPos] = useState({x: 0, y: 0});\r\n    const [dir, setDir] = useState(0);\r\n    const [step, setStep] = useState(0);\r\n    const directions = {\r\n        down: 0,\r\n        left: 1,\r\n        right: 2,\r\n        up: 3,\r\n    };\r\n    const stepSize = 16;\r\n\r\n    const modifier = {\r\n        down:  { x: 0, y: stepSize },\r\n        left:  { x: -stepSize, y: 0 },\r\n        right: { x: stepSize, y: 0 },\r\n        up:    { x: 0, y: -stepSize },\r\n    };\r\n\r\n    function walk(dir) {\r\n        setDir(prev => {\r\n            if(directions[dir] === prev) move(dir) \r\n             return directions[dir];\r\n        });\r\n        setStep((prev) => (prev < maxSteps -1 ? prev +1 : 0));\r\n    }\r\n\r\n    function move(dir) {\r\n        setPos(prev => ({\r\n            x: prev.x + modifier[dir].x,\r\n            y: prev.y + modifier[dir].y,\r\n        }))\r\n    }\r\n\r\n    return {\r\n        walk, \r\n        dir, \r\n        step, \r\n        position\r\n    }\r\n}","import React from \"react\";\r\nimport Actor from \"../actor\";\r\nimport useKeyPress from \"../../hooks/use-key-press\";\r\nimport useWalk from \"../../hooks/use-walk\";\r\n\r\nexport default function Player({ skin }) {\r\n    const { dir, step, walk, position } = useWalk(3); \r\n\r\n    const data = {\r\n        h: 32,\r\n        w: 32,\r\n    };\r\n\r\n    useKeyPress((e) => {\r\n        walk(e.key.replace(\"Arrow\", \"\").toLowerCase());\r\n        e.preventDefault();\r\n    })\r\n\r\n    return <Actor \r\n              sprite={`/sprites/skins/${skin}.png`} \r\n              data={data} \r\n              step={step} \r\n              dir={dir}\r\n              position={position} \r\n           />\r\n}","import { useEffect } from \"react\";\r\n\r\nexport default function useKeyPress(fn) {\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", fn)\r\n        return () => window.removeEventListener(\"keydown\", fn);\r\n    }, [fn])\r\n}","import React from \"react\";\r\nimport Player from \"./components/player\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <div className=\"zone-container\">\r\n            <Player skin=\"m1\" />\r\n        </div>\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}